split_time_depart3<-str_split(Departure_Data$Arrival,":",n=2)
df3<-data.frame(matrix(unlist(split_time_depart3),nrow=nrow(Departure_Data),byrow=T))
names(df3)<-c("dep_hr","dep_min")
#변수 integer로 형변환 시켜줬는데 그 전에 character달아준 이유는 이걸 그냥 integer로 치면
#csv에 있던 시간 데이터 성질이 나와서 다른 데이터 값으로 바뀌기 때문
Departure_Dataf<-cbind(df,df2,df3,Departure_Data)
str(Departure_Dataf)
Departure_Dataf$plan_hr<-as.integer(as.character(Departure_Dataf$plan_hr))
Departure_Dataf$plan_min<-as.integer(as.character(Departure_Dataf$plan_min))
Departure_Dataf$exp_hr<-as.integer(as.character(Departure_Dataf$exp_hr))
Departure_Dataf$exp_min<-as.integer(as.character(Departure_Dataf$exp_min))
Departure_Dataf$dep_hr<-as.integer(as.character(Departure_Dataf$dep_hr))
Departure_Dataf$dep_min<-as.integer(as.character(Departure_Dataf$dep_min))
Departure_Dataf2<-Departure_Dataf
####Full join 위한 key 만들기####
#두 테이블을 합치려면 공유하는 key가 있어야 한다. 연월일시간만 가지고 공유하는 키값을 만들 예정이다.
#그래야 시간대별로 날씨가 들어가니까!
###Depart Data###
attach(Departure_Dataf2)
DepartTime_Check<-data.frame(Year,Month,Date,plan_hr,plan_min)
DepartTime_Check$key_plan_hr<-ifelse(DepartTime_Check$plan_min>=30,plan_hr+1,plan_hr)
DepartTime_Check2<-data.frame(paste(Year,Month,Date,DepartTime_Check$key_plan_hr,sep="-"))
colnames(DepartTime_Check2)<-"Check"
Departure_Dataf2<-cbind(Departure_Dataf2,DepartTime_Check2)
detach(Departure_Dataf2)
str(Departure_Dataf2)
###Weather Data###
total_weather<-rbind(weather_2015f,weather_2016f,weather_2017f,weather_2018f)
split_time_weather<-str_split(total_weather$time,":",n=2)
df100<-data.frame(matrix(unlist(split_time_weather),nrow=nrow(total_weather),byrow=T))
names(df100)<-c("weather_hr","weather_min")
total_weatherf<-cbind(df100,total_weather)
total_weatherf$weather_min<-NULL
WeatherTime_Check<-data.frame(paste(total_weatherf$year,total_weatherf$month,total_weatherf$date,total_weatherf$weather_hr,sep="-"))
colnames(WeatherTime_Check)<-"Check"
total_weatherf<-cbind(total_weatherf,WeatherTime_Check)
####Full join, inner join####
#full join을 하니까 얘가 제대로 합쳐진것인지 모르겠어서 일단 innerjoin으로 보았다.
Departure_Dataf2$Check<-as.character(Departure_Dataf2$Check)
total_weatherf$Check<-as.character(total_weatherf$Check)
test<-full_join(Departure_Dataf2,total_weatherf,by=c("Check"="Check"))
test2<-inner_join(Departure_Dataf2,total_weatherf,by=c("Check"="Check"))
View(test2)
test2$year<-NULL
test2$month<-NULL
test2$date<-NULL
test2$arr_hr<-NULL
test2$arr_min<-NULL
####화물지우기/Arrival Departuretime으로 바꾸기####
test3<-subset(test2,subset=Kind=="여객")
test3$Departure_time<-test3$Arrival
test3$Arrival<-NULL#개빡치게 변수명 바꾸려면 오류뜬다 일단 이렇게라도 할라고
View(test3)
####지연이면 1, 지연아니면 0####
attach(test3)
str(test3)
test3$delay<-ifelse((dep_hr*60+dep_min)-(plan_hr*60+plan_min)>=30,1,0)
a<-subset(test3,subset=delay==1)
detach(test3)
####airport data####
#changeDataType
airports<-read.csv("airports_final.csv",header=T)
airports$latitude_deg<-as.numeric(as.character(airports$latitude_deg))
airports$longitude_deg<-as.numeric(as.character(airports$longitude_deg))
airports$iata_code<-as.character(airports$iata_code)
str(airports)
attach(airports)
airports2<-subset(airports,subset=iata_code!="",select=c(latitude_deg,longitude_deg,iata_code))
airports3<-unique(airports2)
test3$airport_arrival<-substr(test3$Departure,1,3)
test4<-subset(test3,subset=is.na(test3$Departure)==FALSE)
test5<-full_join(test4,airports2,by=c("airport_arrival"="iata_code"))
test6.1<-test5
test6<-subset(test5,subset=is.na(test5$Departure)==FALSE)
detach(airports)
final<-test6
View(final)
plot(flr210.011)
flr210.011<-forecast::forecast(lr210.011, h=72)
xflr210.011<-flr210.011$x
mflr210.011<-flr210.011$mean
all<-merge(actual=as.zoo(xflr210.011),predicted=as.zoo(mflr210.011))
all.xts <- xts(all, date_decimal(index(all)))
dygraph(all.xts,"Temperature") %>%
dySeries("actual", label="Actual") %>%
dySeries("predicted", label="Predicted")
library(dygraphs)
xflr210.011<-flr210.011$x
mflr210.011<-flr210.011$mean
all<-merge(actual=as.zoo(xflr210.011),predicted=as.zoo(mflr210.011))
all.xts <- xts(all, date_decimal(index(all)))
library(forecast)
library(dplyr)
library("stringr")
library("xts")
library(tidyr)
library("itsmr")
library("Metrics")
library(forecast)
library(TSA)
library(stats)
library("bimixt")
View(FlightAllDeparture)
View(mean_temp_final)
all<-merge(actual=as.zoo(xflr210.011),predicted=as.zoo(mflr210.011))
all.xts <- xts(all, date_decimal(index(all)))
library(xts)
all<-merge(actual=as.zoo(xflr210.011),predicted=as.zoo(mflr210.011))
all.xts <- xts(all, date_decimal(index(all)))
library(lubridate)
all<-merge(actual=as.zoo(xflr210.011),predicted=as.zoo(mflr210.011))
all.xts <- xts(all, date_decimal(index(all)))
dygraph(all.xts,"Temperature") %>%
dySeries("actual", label="Actual") %>%
dySeries("predicted", label="Predicted")
all.xts
##############################################################################################
################# train data vs test data >> rmse 비교 >> 최적합의 모델 선택 #################
##############################################################################################
#daily15 model 선택
plot(mean_temp_final100)
lr<-mean_temp_final100
train<-(lr[1:88])
test<-(lr[89:113])
ts.train<-ts(train)
ts.test<-ts(test)
auto.arima(lr)
train.200.011<-Arima(ts.train, order=c(2,0,0),seasonal = list(order=c(0,1,1), period=36),method="ML");AIC(train.200.011)#AIC:216.0987
train.210.011<-Arima(ts.train, order=c(2,1,0),seasonal = list(order=c(0,1,1), period=36),method="ML");AIC(train.210.011)#AIC:219.9475
train.210.001<-Arima(ts.train, order=c(2,1,0),seasonal = list(order=c(0,0,1), period=36),method="ML");AIC(train.210.001)#AIC:402.2084
train.210.111<-Arima(ts.train, order=c(2,1,0),seasonal = list(order=c(1,1,1), period=36),method="ML");AIC(train.210.111)#AIC:221.9475
train.210.110<-Arima(ts.train, order=c(2,1,0),seasonal = list(order=c(1,1,0), period=36),method="ML");AIC(train.210.110)#AIC:219.9475
train.110.011<-Arima(ts.train, order=c(1,1,0),seasonal = list(order=c(0,1,1), period=36),method="ML");AIC(train.110.011)#AIC:230.0437
f.train.200.011<-forecast::forecast(train.200.011, h=72) #train data로 만든 모델로 예측값
f.train.210.011<-forecast::forecast(train.210.011, h=72) #train data로 만든 모델로 예측값
f.train.210.001<-forecast::forecast(train.210.001, h=72) #train data로 만든 모델로 예측값
f.train.210.110<-forecast::forecast(train.210.110, h=72) #train data로 만든 모델로 예측값
f.train.110.011<-forecast::forecast(train.110.011, h=72) #train data로 만든 모델로 예측값
AIC.train<-c(AIC(train.200.011),AIC(train.210.011),AIC(train.210.001),AIC(train.210.110),AIC(train.110.011))
AIC.train #train.200.011 >> best model
#test data로 미리 빼놓았던 실제 데이터와 train data로 만들었던 여러 후보군 모델들로 도출해낸 예측값을 이용해 RMSE 측정
rmse(f.train.200.011$mean, test) #15.96727
rmse(f.train.210.011$mean, test) #15.95714
rmse(f.train.210.001$mean, test) #14.45432 >> best model
rmse(f.train.210.110$mean, test) #15.96111
rmse(f.train.110.011$mean, test) #16.00199
plot(f.train.210.011) #AIC와 rmse를 모두 비교해본 결과 train.210.001 모델이 최적합 모델이었다.
AIC.train<-c(AIC(train.200.011),AIC(train.210.011),AIC(train.210.001),AIC(train.210.110),AIC(train.110.011))
AIC.train #train.200.011 >> best model
#test data로 미리 빼놓았던 실제 데이터와 train data로 만들었던 여러 후보군 모델들로 도출해낸 예측값을 이용해 RMSE 측정
rmse(f.train.200.011$mean, test) #15.96727
AIC.train #train.200.011 >> best model
flr000.010<-forecast::forecast(lr000.010,h=25)
plot(flr000.010)
plot(flr210.011)
flr210.011
test(lr210.011$residuals)#iid나름만족!
#################################Monthly Average!&Daily Average!#############################################
####TimeSeries DataExploring####
mean_windSpeed_final100<-ts(mean_windSpeed_final$windSpeed,frequency=36,start=c(2015,1,5),end=c(2018,4,25))
mean_windSpeed_final200<-ts(mean_windSpeed_final2$windSpeed,frequency=365,start=c(2015,1,1),end=c(2018,5,2))
str(mean_windSpeed_final100)
plot(mean_windSpeed_final100)
#####Standardize Variance!######
log_mean_windSpeed_final100<-log(mean_windSpeed_final100)
#Daily_15days
#분산 안정화 시킨거
plot(log_mean_windSpeed_final100)
test(log_mean_windSpeed_final100)
auto.arima(log_mean_windSpeed_final100)#ARIMA(0,1,2)(0,0,1)[36] #AIC: -143.15
lr<-log_mean_windSpeed_final100
lr112.001<-Arima(lr, order=c(1,1,2),seasonal = list(order=c(0,0,1), period=36),method="ML");AIC(lr112.001)#AIC:-142.7585
lr212.001<-Arima(lr, order=c(2,1,2),seasonal = list(order=c(0,0,1), period=36),method="ML");AIC(lr212.001)#AIC:-140.4544
lr312.001<-Arima(lr, order=c(3,1,2),seasonal = list(order=c(0,0,1), period=36),method="ML");AIC(lr312.001)#AIC:-138.4898
lr412.001<-Arima(lr, order=c(4,1,2),seasonal = list(order=c(0,0,1), period=36),method="ML");AIC(lr412.001)#AIC:-138.2033
lr412.101<-Arima(lr, order=c(4,1,2),seasonal = list(order=c(1,0,1), period=36),method="ML");AIC(lr412.101)#AIC:-136.532
test(lr112.001$residuals)#iid success!
test(lr112.001$residuals)#iid success!
flr112.001<-forecast::forecast(lr112.001, h=72)
plot(flr112.001)
##############################################################################################
################# train data vs test data >> rmse 비교 >> 최적합의 모델 선택 #################
##############################################################################################
#daily15 model 선택
plot(mean_temp_final100)
lr<-mean_temp_final100
train<-(lr[1:88])
test<-(lr[89:113])
ts.train<-ts(train)
ts.test<-ts(test)
auto.arima(lr)
train.200.011<-Arima(ts.train, order=c(2,0,0),seasonal = list(order=c(0,1,1), period=36),method="ML");AIC(train.200.011)#AIC:700.8021
train.210.011<-Arima(ts.train, order=c(2,1,0),seasonal = list(order=c(0,1,1), period=36),method="ML");AIC(train.210.011)#AIC:707.958
train.210.001<-Arima(ts.train, order=c(2,1,0),seasonal = list(order=c(0,0,1), period=36),method="ML");AIC(train.210.001)#AIC:1079.579
train.210.111<-Arima(ts.train, order=c(2,1,0),seasonal = list(order=c(1,1,1), period=36),method="ML");AIC(train.210.111)#AIC:709.9437
train.210.110<-Arima(ts.train, order=c(2,1,0),seasonal = list(order=c(1,1,0), period=36),method="ML");AIC(train.210.110)#AIC:708.2355
train.110.011<-Arima(ts.train, order=c(1,1,0),seasonal = list(order=c(0,1,1), period=36),method="ML");AIC(train.110.011)#AIC:711.436
f.train.200.011<-forecast::forecast(train.200.011, h=72) #train data로 만든 모델로 예측값
f.train.210.011<-forecast::forecast(train.210.011, h=72) #train data로 만든 모델로 예측값
f.train.210.001<-forecast::forecast(train.210.001, h=72) #train data로 만든 모델로 예측값
f.train.210.110<-forecast::forecast(train.210.110, h=72) #train data로 만든 모델로 예측값
f.train.110.011<-forecast::forecast(train.110.011, h=72) #train data로 만든 모델로 예측값
AIC.train<-c(AIC(train.200.011),AIC(train.210.011),AIC(train.210.001),AIC(train.210.110),AIC(train.110.011))
AIC.train #train.200.011 >> best model
#test data로 미리 빼놓았던 실제 데이터와 train data로 만들었던 여러 후보군 모델들로 도출해낸 예측값을 이용해 RMSE 측정
rmse(f.train.200.011$mean, test) #15.96727
rmse(f.train.210.011$mean, test) #15.95714
rmse(f.train.210.001$mean, test) #14.45432 >> best model
rmse(f.train.210.110$mean, test) #15.96111
rmse(f.train.110.011$mean, test) #16.00199
plot(f.train.412.012) #AIC와 rmse를 모두 비교해본 결과 train.200.011 모델이 최적합 모델이었다.
train.200.011<-Arima(ts.train, order=c(2,0,0),seasonal = list(order=c(0,1,1), period=36),method="ML");AIC(train.200.011)#AIC:700.8021
train.210.011<-Arima(ts.train, order=c(2,1,0),seasonal = list(order=c(0,1,1), period=36),method="ML");AIC(train.210.011)#AIC:707.958
train.210.001<-Arima(ts.train, order=c(2,1,0),seasonal = list(order=c(0,0,1), period=36),method="ML");AIC(train.210.001)#AIC:1079.579
train.210.111<-Arima(ts.train, order=c(2,1,0),seasonal = list(order=c(1,1,1), period=36),method="ML");AIC(train.210.111)#AIC:709.9437
#test data로 미리 빼놓았던 실제 데이터와 train data로 만들었던 여러 후보군 모델들로 도출해낸 예측값을 이용해 RMSE 측정
rmse(f.train.200.011$mean, ts.test) #15.96727
#test data로 미리 빼놓았던 실제 데이터와 train data로 만들었던 여러 후보군 모델들로 도출해낸 예측값을 이용해 RMSE 측정
rmse(f.train.200.011$mean, test) #15.96727
##############################################################################################
################# train data vs test data >> rmse 비교 >> 최적합의 모델 선택 #################
##############################################################################################
#daily15 model 선택
plot(mean_temp_final100)
##############################################################################################
################# train data vs test data >> rmse 비교 >> 최적합의 모델 선택 #################
##############################################################################################
#daily15 model 선택
plot(mean_windSpeed_final100)
lr<-log_mean_windSpeed_final100
train<-(lr[1:88])
test<-(lr[89:113])
ts.train<-ts(train)
ts.test<-ts(test)
auto.arima(lr)
train.200.011<-Arima(ts.train, order=c(0,1,2),seasonal = list(order=c(0,1,1), period=36),method="ML");AIC(train.200.011)#AIC:216.0987
train.210.011<-Arima(ts.train, order=c(0,1,1),seasonal = list(order=c(0,1,1), period=36),method="ML");AIC(train.210.011)#AIC:219.9475
train.011.011<-Arima(ts.train, order=c(0,1,1),seasonal = list(order=c(0,1,1), period=36),method="ML");AIC(train.210.011)#AIC:219.9475
train.012.011<-Arima(ts.train, order=c(0,1,2),seasonal = list(order=c(0,1,1), period=36),method="ML");AIC(train.012.011)#AIC:-55.16111
train.011.011<-Arima(ts.train, order=c(0,1,1),seasonal = list(order=c(0,1,1), period=36),method="ML");AIC(train.011.011)#AIC:-55.24331
train.112.111<-Arima(ts.train, order=c(1,1,2),seasonal = list(order=c(1,1,1), period=36),method="ML");AIC(train.112.111)#AIC:402.2084
train.012.111<-Arima(ts.train, order=c(0,1,2),seasonal = list(order=c(1,1,1), period=36),method="ML");AIC(train.012.111)#AIC:709.9437
train.012.101<-Arima(ts.train, order=c(0,1,2),seasonal = list(order=c(1,0,1), period=36),method="ML");AIC(train.012.101)#AIC:708.2355
train.012.100<-Arima(ts.train, order=c(0,1,2),seasonal = list(order=c(1,0,0), period=36),method="ML");AIC(train.012.100)#AIC:711.436
f.train.011.011<-forecast::forecast(train.011.011, h=72) #train data로 만든 모델로 예측값
f.train.012.101<-forecast::forecast(train.012.101, h=72) #train data로 만든 모델로 예측값
f.train.012.100<-forecast::forecast(train.012.100, h=72) #train data로 만든 모델로 예측값
f.train.012.011<-forecast::forecast(train.012.011, h=72) #train data로 만든 모델로 예측값
f.train.011.011<-forecast::forecast(train.011.011, h=72) #train data로 만든 모델로 예측값
f.train.112.111<-forecast::forecast(train.112.111, h=72) #train data로 만든 모델로 예측값
f.train.012.101<-forecast::forecast(train.012.101, h=72) #train data로 만든 모델로 예측값
f.train.012.100<-forecast::forecast(train.012.100, h=72) #train data로 만든 모델로 예측값
AIC.train<-c(AIC(train.012.011),AIC(train.011.011),AIC(train.112.111),AIC(train.012.101),AIC(train.012.100))
AIC.train #train.200.011 >> best model
#test data로 미리 빼놓았던 실제 데이터와 train data로 만들었던 여러 후보군 모델들로 도출해낸 예측값을 이용해 RMSE 측정
rmse(f.train.012.011$mean, test) #15.96727
rmse(f.train.011.011$mean, test) #15.95714
rmse(f.train.112.111$mean, test) #14.45432 >> best model
rmse(f.train.012.101$mean, test) #15.96111
rmse(f.train.012.100$mean, test) #16.00199
#test data로 미리 빼놓았던 실제 데이터와 train data로 만들었던 여러 후보군 모델들로 도출해낸 예측값을 이용해 RMSE 측정
mse(f.train.012.011$mean, test) #15.96727
lr012.011<-Arima(lr, order=c(0,1,2),seasonal = list(order=c(0,1,1), period=36),method="ML");AIC(lr012.011)#AIC:-142.7585
lr011.011<-Arima(lr, order=c(0,1,1),seasonal = list(order=c(0,1,1), period=36),method="ML");AIC(lr011.011)#AIC:-140.4544
lr112.111<-Arima(lr, order=c(1,1,2),seasonal = list(order=c(1,1,1), period=36),method="ML");AIC(lr112.111)#AIC:-138.4898
lr012.101<-Arima(lr, order=c(0,1,2),seasonal = list(order=c(1,0,1), period=36),method="ML");AIC(lr012.101)#AIC:-138.2033
lr012.100<-Arima(lr, order=c(0,1,2),seasonal = list(order=c(1,0,0), period=36),method="ML");AIC(lr012.100)#AIC:-136.532
test(lr012.100$residuals)#iid success!
flr112.001<-forecast::forecast(lr112.001, h=72)
plot(flr112.001)
plot(flr012.100)
flr012.100<-forecast::forecast(lr012.100, h=72)
plot(flr012.100)
par(mfrow=c(1,1))
flr012.100<-forecast::forecast(lr012.100, h=72)
par(mfrow=c(1,1))
flr012.100<-forecast::forecast(lr012.100, h=72)
plot(flr012.100)
flr112.001
exp.xflr112.001<-exp(flr112.001$x)
exp.mflr112.001<-exp(flr112.001$mean)
exp.xflr112.001
exp.mflr112.001
all<-merge(actual=as.zoo(exp.xflr112.001),predicted=as.zoo(exp.mflr112.001))
all.xts <- xts(all, date_decimal(index(all)))
dygraph(all.xts,"windSpeed") %>%
dySeries("actual", label="Actual") %>%
dySeries("predicted", label="Predicted")
lr012.011<-Arima(lr, order=c(0,1,2),seasonal = list(order=c(0,1,1), period=36),method="ML");AIC(lr012.011)#AIC:-142.7585
lr011.011<-Arima(lr, order=c(0,1,1),seasonal = list(order=c(0,1,1), period=36),method="ML");AIC(lr011.011)#AIC:-140.4544
lr112.111<-Arima(lr, order=c(1,1,2),seasonal = list(order=c(1,1,1), period=36),method="ML");AIC(lr112.111)#AIC:-138.4898
lr112.111<-Arima(lr, order=c(1,1,2),seasonal = list(order=c(1,1,1), period=36),method="ML");AIC(lr112.111)#AIC:-66.93466
lr012.101<-Arima(lr, order=c(0,1,2),seasonal = list(order=c(1,0,1), period=36),method="ML");AIC(lr012.101)#AIC:-138.2033
lr012.100<-Arima(lr, order=c(0,1,2),seasonal = list(order=c(1,0,0), period=36),method="ML");AIC(lr012.100)#AIC:-
test(lr012.100$residuals)#iid success!
exp.xflr012.100<-exp(flr012.100$x)
exp.mflr012.100<-exp(flr012.100$mean)
all<-merge(actual=as.zoo(exp.xflr012.100),predicted=as.zoo(exp.mflr012.100))
all.xts <- xts(all, date_decimal(index(all)))
dygraph(all.xts,"windSpeed") %>%
dySeries("actual", label="Actual") %>%
dySeries("predicted", label="Predicted")
all.xts
daily15_windSpeed<-data.frame(all.xts)
write.csv(daily15_windSpeed,file="C:/Users/Jungwoo Lim/Desktop/daily15_windSpeed.csv")
exp.xflr012.100<-exp(flr012.100$x)
exp.mflr012.100<-exp(flr012.100$mean)
exp.train.mflr012.011<-exp(f.train.012.011$mean)
exp.train.mflr011.011<-exp(f.train.011.011$mean)
exp.train.mflr112.111<-exp(f.train.112.111$mean)
exp.train.mflr012.101<-exp(f.train.012.101$mean)
exp.train.mflr012.100<-exp(f.train.012.100$mean)
rmse(exp.train.mflr.012.011$mean, test) #15.96727
f.train.012.011<-forecast::forecast(train.012.011, h=72) #train data로 만든 모델로 예측값
f.train.011.011<-forecast::forecast(train.011.011, h=72) #train data로 만든 모델로 예측값
f.train.112.111<-forecast::forecast(train.112.111, h=72) #train data로 만든 모델로 예측값
f.train.012.101<-forecast::forecast(train.012.101, h=72) #train data로 만든 모델로 예측값
f.train.012.100<-forecast::forecast(train.012.100, h=72) #train data로 만든 모델로 예측값
AIC.train<-c(AIC(train.012.011),AIC(train.011.011),AIC(train.112.111),AIC(train.012.101),AIC(train.012.100))
exp.train.mflr012.011<-exp(f.train.012.011$mean)
exp.train.mflr011.011<-exp(f.train.011.011$mean)
exp.train.mflr112.111<-exp(f.train.112.111$mean)
exp.train.mflr012.101<-exp(f.train.012.101$mean)
exp.train.mflr012.100<-exp(f.train.012.100$mean)
rmse(exp.train.mflr.012.011$mean, test) #15.96727
rmse(exp.train.mflr012.011$mean, test) #15.96727
rmse(exp.train.mflr012.011, test) #15.96727
rmse(exp.train.mflr011.011, test) #15.95714
flr012.100<-forecast::forecast(lr012.100, h=72)
plot(flr012.100)
all<-merge(actual=as.zoo(exp.xflr012.100),predicted=as.zoo(exp.mflr012.100))
all.xts <- xts(all, date_decimal(index(all)))
dygraph(all.xts,"windSpeed") %>%
dySeries("actual", label="Actual") %>%
dySeries("predicted", label="Predicted")
all.xts
daily15_windSpeed<-data.frame(all.xts)
write.csv(daily15_windSpeed,file="C:/Users/Jungwoo Lim/Desktop/daily15_windSpeed.csv")
#################################Monthly Average!&Daily Average!#############################################
####TimeSeries DataExploring####
mean_humidity_final100<-ts(mean_humidity_final$humidity,frequency=36,start=c(2015,1,5),end=c(2018,5,5))
plot(mean_humidity_final100)
log_mean_humidity_final100<-log(mean_humidity_final100)
plot(log_mean_humidity_final100)
test(log_mean_humidity_final100)
plot(log_mean_humidity_final100)
test(log_mean_humidity_final100)
auto.arima(log_mean_humidity_final100)#ARIMA(1,0,0)(1,1,0)[36] #AIC:-83.57
lr<-log_mean_humidity_final100
lr100.111<-Arima(lr, order=c(1,0,0),seasonal = list(order=c(1,1,1), period=36),method="ML",transform.pars = FALSE);AIC(lr100.111)#AIC:-81.6367
test(lr100.011$residuals)#autoarimma가 가장 작지만 iid만족하게 하는건 이게 더 좋음
lr100.111<-Arima(lr, order=c(1,0,0),seasonal = list(order=c(1,1,1), period=36),method="ML",transform.pars = FALSE);AIC(lr100.111)#AIC:-81.6367
lr110.110<-Arima(lr, order=c(1,1,0),seasonal = list(order=c(1,1,0), period=36),method="ML",transform.pars = FALSE);AIC(lr110.110)#AIC:-53.77205
lr110.111<-Arima(lr, order=c(1,1,0),seasonal = list(order=c(1,1,1), period=36),method="ML",transform.pars = FALSE);AIC(lr110.111)#AIC:-52.51396
lr100.011<-Arima(lr, order=c(1,0,0),seasonal = list(order=c(0,1,1), period=36),method="ML",transform.pars = FALSE);AIC(lr100.011)#AIC:-83.50474
lr111.110<-Arima(lr, order=c(0,1,1),seasonal = list(order=c(1,1,0), period=36),method="ML",transform.pars = FALSE);AIC(lr111.110)#AIC:-76.35918
lr100.110<-Arima(lr, order=c(1,0,0),seasonal = list(order=c(1,1,0), period=36),method="ML",transform.pars = FALSE);AIC(lr100.110)#AIC:-83.6312
test(lr100.011$residuals)#autoarimma가 가장 작지만 iid만족하게 하는건 이게 더 좋음
##############################################################################################
################# train data vs test data >> rmse 비교 >> 최적합의 모델 선택 #################
##############################################################################################
#daily15 model 선택
plot(mean_humidity_final100)
lr<-mean_humidity_final100
train<-(lr[1:88])
test<-(lr[89:112])
ts.train<-ts(train)
ts.test<-ts(test)
auto.arima(lr)
train.200.011<-Arima(ts.train, order=c(2,0,0),seasonal = list(order=c(0,1,1), period=36),method="ML");AIC(train.200.011)#AIC:
train.210.011<-Arima(ts.train, order=c(2,1,0),seasonal = list(order=c(0,1,1), period=36),method="ML");AIC(train.210.011)#AIC:707.958
train.210.001<-Arima(ts.train, order=c(2,1,0),seasonal = list(order=c(0,0,1), period=36),method="ML");AIC(train.210.001)#AIC:1079.579
train.210.111<-Arima(ts.train, order=c(2,1,0),seasonal = list(order=c(1,1,1), period=36),method="ML");AIC(train.210.111)#AIC:709.9437
train.210.110<-Arima(ts.train, order=c(2,1,0),seasonal = list(order=c(1,1,0), period=36),method="ML");AIC(train.210.110)#AIC:708.2355
train.110.011<-Arima(ts.train, order=c(1,1,0),seasonal = list(order=c(0,1,1), period=36),method="ML");AIC(train.110.011)#AIC:711.436
f.train.200.011<-forecast::forecast(train.200.011, h=72) #train data로 만든 모델로 예측값
f.train.210.011<-forecast::forecast(train.210.011, h=72) #train data로 만든 모델로 예측값
f.train.210.001<-forecast::forecast(train.210.001, h=72) #train data로 만든 모델로 예측값
f.train.210.110<-forecast::forecast(train.210.110, h=72) #train data로 만든 모델로 예측값
f.train.110.011<-forecast::forecast(train.110.011, h=72) #train data로 만든 모델로 예측값
#test data로 미리 빼놓았던 실제 데이터와 train data로 만들었던 여러 후보군 모델들로 도출해낸 예측값을 이용해 RMSE 측정
rmse(f.train.200.011$mean, test) #15.96727
rmse(f.train.210.011$mean, test) #15.95714
rmse(f.train.210.001$mean, test) #14.45432 >> best model
rmse(f.train.210.110$mean, test) #15.96111
rmse(f.train.110.011$mean, test) #16.00199
test(lr100.110$residuals)#autoarimma가 가장 작지만 iid만족하게 하는건 이게 더 좋음
test(lr100.111$residuals)#autoarimma가 가장 작지만 iid만족하게 하는건 이게 더 좋음
test(lr100.110$residuals)#autoarimma가 가장 작지만 iid만족하게 하는건 이게 더 좋음
test(lr100.011$residuals)#autoarimma가 가장 작지만 iid만족하게 하는건 이게 더 좋음
lr210.011<-Arima(lr, order=c(2,1,0),seasonal = list(order=c(0,1,1), period=36),method="ML",transform.pars = FALSE);AIC(lr110.110)#AIC:-53.77205
lr200.011<-Arima(lr, order=c(2,0,0),seasonal = list(order=c(0,1,1), period=36),method="ML",transform.pars = FALSE);AIC(lr200.011)#AIC:-81.6367
lr210.011<-Arima(lr, order=c(2,1,0),seasonal = list(order=c(0,1,1), period=36),method="ML",transform.pars = FALSE);AIC(lr210.011)#AIC:-53.77205
lr210.001<-Arima(lr, order=c(2,1,0),seasonal = list(order=c(0,0,1), period=36),method="ML",transform.pars = FALSE);AIC(lr210.001)#AIC:-52.51396
lr210.211<-Arima(lr, order=c(2,1,0),seasonal = list(order=c(2,1,1), period=36),method="ML",transform.pars = FALSE);AIC(lr210.211)#AIC:-83.50474
lr210.110<-Arima(lr, order=c(2,1,0),seasonal = list(order=c(1,1,0), period=36),method="ML",transform.pars = FALSE);AIC(lr210.110)#AIC:-76.35918
lr110.011<-Arima(lr, order=c(1,1,0),seasonal = list(order=c(0,1,1), period=36),method="ML",transform.pars = FALSE);AIC(lr110.011)#AIC:-83.6312
test(lr200.011$residuals)#autoarimma가 가장 작지만 iid만족하게 하는건 이게 더 좋음
test(lr200.011$residuals)#autoarimma가 가장 작지만 iid만족하게 하는건 이게 더 좋음
auto.arima(log_mean_humidity_final100)#ARIMA(1,0,0)(1,1,0)[36] #AIC:-83.57
lr<-log_mean_humidity_final100
lr200.011<-Arima(lr, order=c(2,0,0),seasonal = list(order=c(0,1,1), period=36),method="ML",transform.pars = FALSE);AIC(lr200.011)#AIC:540.886
lr210.011<-Arima(lr, order=c(2,1,0),seasonal = list(order=c(0,1,1), period=36),method="ML",transform.pars = FALSE);AIC(lr210.011)#AIC:552.6669
lr210.001<-Arima(lr, order=c(2,1,0),seasonal = list(order=c(0,0,1), period=36),method="ML",transform.pars = FALSE);AIC(lr210.001)#AIC:784.7157
lr210.211<-Arima(lr, order=c(2,1,0),seasonal = list(order=c(2,1,1), period=36),method="ML",transform.pars = FALSE);AIC(lr210.211)#AIC:556.6616
lr210.110<-Arima(lr, order=c(2,1,0),seasonal = list(order=c(1,1,0), period=36),method="ML",transform.pars = FALSE);AIC(lr210.110)#AIC:552.6947
lr110.011<-Arima(lr, order=c(1,1,0),seasonal = list(order=c(0,1,1), period=36),method="ML",transform.pars = FALSE);AIC(lr110.011)#AIC:-
test(lr200.011$residuals)#autoarimma가 가장 작지만 iid만족하게 하는건 이게 더 좋음
lr<-mean_humidity_final100
train.200.011<-Arima(ts.train, order=c(2,0,0),seasonal = list(order=c(0,1,1), period=36),method="ML");AIC(train.200.011)#AIC:365.6687
train.200.011<-Arima(ts.train, order=c(2,0,0),seasonal = list(order=c(0,1,1), period=36),method="ML");AIC(train.200.011)#AIC:365.6687
train.210.011<-Arima(ts.train, order=c(2,1,0),seasonal = list(order=c(0,1,1), period=36),method="ML");AIC(train.210.011)#AIC:371.2742
train.210.001<-Arima(ts.train, order=c(2,1,0),seasonal = list(order=c(0,0,1), period=36),method="ML");AIC(train.210.001)#AIC:605.9426
train.210.111<-Arima(ts.train, order=c(2,1,0),seasonal = list(order=c(1,1,1), period=36),method="ML");AIC(train.210.111)#AIC:372.3492
train.210.110<-Arima(ts.train, order=c(2,1,0),seasonal = list(order=c(1,1,0), period=36),method="ML");AIC(train.210.110)#AIC:370.349
train.110.011<-Arima(ts.train, order=c(1,1,0),seasonal = list(order=c(0,1,1), period=36),method="ML");AIC(train.110.011)#AIC:380.2544
f.train.200.011<-forecast::forecast(train.200.011, h=72) #train data로 만든 모델로 예측값
f.train.210.011<-forecast::forecast(train.210.011, h=72) #train data로 만든 모델로 예측값
f.train.210.001<-forecast::forecast(train.210.001, h=72) #train data로 만든 모델로 예측값
f.train.210.110<-forecast::forecast(train.210.110, h=72) #train data로 만든 모델로 예측값
f.train.110.011<-forecast::forecast(train.110.011, h=72) #train data로 만든 모델로 예측값
AIC.train<-c(AIC(train.200.011),AIC(train.210.011),AIC(train.210.001),AIC(train.210.110),AIC(train.110.011))
AIC.train #train.200.011 >> best model
#test data로 미리 빼놓았던 실제 데이터와 train data로 만들었던 여러 후보군 모델들로 도출해낸 예측값을 이용해 RMSE 측정
rmse(f.train.200.011$mean, test) #12.33076>> best model
rmse(f.train.210.011$mean, test) #17.05327
rmse(f.train.210.001$mean, test) #15.3447
##############################################################################################
################# train data vs test data >> rmse 비교 >> 최적합의 모델 선택 #################
##############################################################################################
#daily15 model 선택
plot(mean_humidity_final100)
lr<-mean_humidity_final100
train<-(lr[1:88])
test<-(lr[89:112])
ts.train<-ts(train)
ts.test<-ts(test)
auto.arima(lr)
train.200.011<-Arima(ts.train, order=c(2,0,0),seasonal = list(order=c(0,1,1), period=36),method="ML");AIC(train.200.011)#AIC:365.6687
train.210.011<-Arima(ts.train, order=c(2,1,0),seasonal = list(order=c(0,1,1), period=36),method="ML");AIC(train.210.011)#AIC:371.2742
train.210.001<-Arima(ts.train, order=c(2,1,0),seasonal = list(order=c(0,0,1), period=36),method="ML");AIC(train.210.001)#AIC:605.9426
train.210.111<-Arima(ts.train, order=c(2,1,0),seasonal = list(order=c(1,1,1), period=36),method="ML");AIC(train.210.111)#AIC:372.3492
lr<-log_mean_humidity_final100
plot(log_mean_humidity_final100)
test(log_mean_humidity_final100)
auto.arima(log_mean_humidity_final100)#ARIMA(1,0,0)(1,1,0)[36] #AIC:-83.57
lr<-log_mean_humidity_final100
lr200.011<-Arima(lr, order=c(2,0,0),seasonal = list(order=c(0,1,1), period=36),method="ML",transform.pars = FALSE);AIC(lr200.011)#AIC:-82.33786
lr210.011<-Arima(lr, order=c(2,1,0),seasonal = list(order=c(0,1,1), period=36),method="ML",transform.pars = FALSE);AIC(lr210.011)#AIC:-63.24127
lr210.001<-Arima(lr, order=c(2,1,0),seasonal = list(order=c(0,0,1), period=36),method="ML",transform.pars = FALSE);AIC(lr210.001)#AIC:-124.0893
lr210.211<-Arima(lr, order=c(2,1,0),seasonal = list(order=c(2,1,1), period=36),method="ML",transform.pars = FALSE);AIC(lr210.211)#AIC:-59.29269
lr210.110<-Arima(lr, order=c(2,1,0),seasonal = list(order=c(1,1,0), period=36),method="ML",transform.pars = FALSE);AIC(lr210.110)#AIC:-63.27546
lr<-log_mean_humidity_final100
train.200.011<-Arima(ts.train, order=c(2,0,0),seasonal = list(order=c(0,1,1), period=36),method="ML");AIC(train.200.011)#AIC:365.6687
train.210.011<-Arima(ts.train, order=c(2,1,0),seasonal = list(order=c(0,1,1), period=36),method="ML");AIC(train.210.011)#AIC:371.2742
train<-(lr[1:88])
test<-(lr[89:112])
ts.train<-ts(train)
ts.test<-ts(test)
auto.arima(lr)
train.200.011<-Arima(ts.train, order=c(1,0,0),seasonal = list(order=c(0,1,1), period=36),method="ML");AIC(train.100.011)#AIC:365.6687
train.210.011<-Arima(ts.train, order=c(1,1,0),seasonal = list(order=c(0,1,1), period=36),method="ML");AIC(train.110.011)#AIC:371.2742
train.100.011<-Arima(ts.train, order=c(1,0,0),seasonal = list(order=c(0,1,1), period=36),method="ML");AIC(train.100.011)#AIC:365.6687
train.110.011<-Arima(ts.train, order=c(1,1,0),seasonal = list(order=c(0,1,1), period=36),method="ML");AIC(train.110.011)#AIC:371.2742
train.110.001<-Arima(ts.train, order=c(1,1,0),seasonal = list(order=c(0,0,1), period=36),method="ML");AIC(train.110.001)#AIC:605.9426
train.110.111<-Arima(ts.train, order=c(1,1,0),seasonal = list(order=c(1,1,1), period=36),method="ML");AIC(train.110.111)#AIC:372.3492
train.110.110<-Arima(ts.train, order=c(1,1,0),seasonal = list(order=c(1,1,0), period=36),method="ML");AIC(train.110.110)#AIC:370.349
train.110.011<-Arima(ts.train, order=c(1,1,0),seasonal = list(order=c(0,1,1), period=36),method="ML");AIC(train.110.011)#AIC:380.2544
f.train.100.011<-forecast::forecast(train.100.011, h=72) #train data로 만든 모델로 예측값
f.train.110.011<-forecast::forecast(train.110.011, h=72) #train data로 만든 모델로 예측값
f.train.110.001<-forecast::forecast(train.110.001, h=72) #train data로 만든 모델로 예측값
f.train.110.110<-forecast::forecast(train.110.110, h=72) #train data로 만든 모델로 예측값
#test data로 미리 빼놓았던 실제 데이터와 train data로 만들었던 여러 후보군 모델들로 도출해낸 예측값을 이용해 RMSE 측정
rmse(f.train.100.011$mean, test) #12.33076>> best model
rmse(f.train.110.011$mean, test) #17.05327
rmse(f.train.110.001$mean, test) #15.3447
rmse(f.train.110.110$mean, test) #15.75151
lr100.011<-Arima(lr, order=c(1,0,0),seasonal = list(order=c(0,1,1), period=36),method="ML",transform.pars = FALSE);AIC(lr100.011)#AIC:-82.33786
lr110.011<-Arima(lr, order=c(1,1,0),seasonal = list(order=c(0,1,1), period=36),method="ML",transform.pars = FALSE);AIC(lr110.011)#AIC:-63.24127
lr110.001<-Arima(lr, order=c(1,1,0),seasonal = list(order=c(0,0,1), period=36),method="ML",transform.pars = FALSE);AIC(lr110.001)#AIC:-124.0893
lr110.211<-Arima(lr, order=c(1,1,0),seasonal = list(order=c(2,1,1), period=36),method="ML",transform.pars = FALSE);AIC(lr110.211)#AIC:-59.29269
lr110.110<-Arima(lr, order=c(1,1,0),seasonal = list(order=c(1,1,0), period=36),method="ML",transform.pars = FALSE);AIC(lr110.110)#AIC:-63.27546
lr<-log_mean_humidity_final100
train.100.011<-Arima(ts.train, order=c(1,0,0),seasonal = list(order=c(0,1,1), period=36),method="ML");AIC(train.100.011)#AIC:-57.51601
lr100.011<-Arima(lr, order=c(1,0,0),seasonal = list(order=c(0,1,1), period=36),method="ML",transform.pars = FALSE);AIC(lr100.011)#AIC:-83.50474
lr110.011<-Arima(lr, order=c(1,1,0),seasonal = list(order=c(0,1,1), period=36),method="ML",transform.pars = FALSE);AIC(lr110.011)#AIC:-54.36789
lr110.211<-Arima(lr, order=c(1,1,0),seasonal = list(order=c(2,1,1), period=36),method="ML",transform.pars = FALSE);AIC(lr110.211)#AIC:
lr110.110<-Arima(lr, order=c(1,1,0),seasonal = list(order=c(1,1,0), period=36),method="ML",transform.pars = FALSE);AIC(lr110.110)#AIC:-63.27546
lr110.110<-Arima(lr, order=c(1,1,0),seasonal = list(order=c(1,1,0), period=36),method="ML",transform.pars = FALSE);AIC(lr110.110)#AIC:-53.77205
test(lr110.001$residuals)#autoarimma가 가장 작지만 iid만족하게 하는건 이게 더 좋음
test(lr110.001$residuals)#autoarimma가 가장 작지만 iid만족하게 하는건 이게 더 좋음
flr110.001<-forecast::forecast(lr110.001, h=72)
plot(flr110.001)
flr110.001<-forecast::forecast(lr110.001, h=72)
plot(flr110.001)
exp.xflr110.001<-exp(flr110.001$x)
exp.mflr110.001<-exp(flr110.001$mean)
all<-merge(actual=as.zoo(exp.xflr100.011),predicted=as.zoo(exp.mflr100.011))
all.xts <- xts(all, date_decimal(index(all)))
all<-merge(actual=as.zoo(exp.xflr100.011),predicted=as.zoo(exp.mflr100.001))
all.xts <- xts(all, date_decimal(index(all)))
all<-merge(actual=as.zoo(exp.xflr100.001),predicted=as.zoo(exp.mflr100.001))
exp.xflr110.001<-exp(flr110.001$x)
exp.mflr110.001<-exp(flr110.001$mean)
all<-merge(actual=as.zoo(exp.xflr100.001),predicted=as.zoo(exp.mflr100.001))
all<-merge(actual=as.zoo(exp.xflr110.001),predicted=as.zoo(exp.mflr110.001))
all.xts <- xts(all, date_decimal(index(all)))
dygraph(all.xts,"Humidity") %>%
dySeries("actual", label="Actual") %>%
dySeries("predicted", label="Predicted")
par(mfrow=c(1,1))
plot(flr110.001)
